#!/usr/bin/env python3
"""
Script de d√©monstration pour le correcteur Terraform
Montre comment utiliser le correcteur avec diff√©rents exemples
"""

import os
import json
import tempfile
import subprocess
import shutil

def create_problematic_terraform():
    """Cr√©e un fichier Terraform avec des probl√®mes"""
    return '''# Fichier Terraform avec des probl√®mes pour d√©monstration

resource "keycloak_realm" "demo-realm" {
  realm                = "demo-realm"
  display_name         = "Demo Realm"
  enabled              = true
  # Attribut non support√©
  unsupported_attr     = "value"
}

resource "keycloak_user" "demouser" {
  # Attribut requis manquant: username
  realm_id   = keycloak_realm.demo-realm.id
  enabled    = true
  first_name = "Jane"
  last_name  = "Smith"
  email      = "jane.smith@example.com"
  # Attribut non support√©
  invalid_attr = "value"
}

resource "keycloak_openid_client" "demo_client" {
  realm_id                     = keycloak_realm.demo-realm.id
  client_id                    = "demo-client"
  name                         = "Demo Client"
  enabled                      = true
  standard_flow_enabled        = true
  implicit_flow_enabled        = false
  direct_access_grants_enabled = false
  service_accounts_enabled     = false
  public_client                = false
  bearer_only                  = false
  valid_redirect_uris = ["http://localhost:3000/*"]
  web_origins = ["http://localhost:3000"]
  # Attribut non support√©
  invalid_client_attr = "value"
}

resource "keycloak_oidc_identity_provider" "demo-idp" {
  realm             = keycloak_realm.demo-realm.id
  alias             = "demo-idp"
  enabled           = true
  display_name      = "Demo IDP"
  # URLs OIDC manquantes (erreur)
  client_id         = "demo-client-id"
  client_secret     = "demo-secret"
  default_scopes    = "openid"
}

resource "keycloak_group" "demo-group" {
  # Attribut requis manquant: name
  realm_id = keycloak_realm.demo-realm.id
  # Attribut non support√©
  invalid_group_attr = "value"
}

resource "keycloak_role" "demo-role" {
  # Attribut requis manquant: name
  realm_id = keycloak_realm.demo-realm.id
  description = "Demo Role"
  composite = false
  # Attribut non support√©
  invalid_role_attr = "value"
}'''

def run_demo():
    """Ex√©cute la d√©monstration compl√®te"""
    print("üöÄ D√âMONSTRATION DU CORRECTEUR TERRAFORM")
    print("=" * 50)
    
    # Cr√©er le r√©pertoire de test
    test_dir = 'demo_fix'
    if os.path.exists(test_dir):
        shutil.rmtree(test_dir)
    os.makedirs(test_dir)
    
    try:
        # 1. Cr√©er du code Terraform probl√©matique
        print("\nüìù 1. Cr√©ation de code Terraform probl√©matique...")
        
        problematic_tf = create_problematic_terraform()
        with open(f'{test_dir}/problematic.tf', 'w') as f:
            f.write(problematic_tf)
        
        print("‚úÖ Code Terraform probl√©matique cr√©√©")
        
        # Afficher le contenu avant correction
        print("\nüìÑ Contenu AVANT correction:")
        print("-" * 40)
        with open(f'{test_dir}/problematic.tf', 'r') as f:
            print(f.read())
        
        # 2. Analyser le code probl√©matique (sans correction)
        print("\nüîç 2. Analyse du code probl√©matique...")
        result = subprocess.run(['python3', 'analyze_terraform.py', test_dir], 
                              capture_output=True, text=True)
        print("R√©sultat de l'analyse:")
        print(result.stdout)
        
        # 3. Corriger le code
        print("\nüîß 3. Correction automatique du code...")
        result = subprocess.run(['python3', 'fix_terraform.py', test_dir], 
                              capture_output=True, text=True)
        print("R√©sultat de la correction:")
        print(result.stdout)
        
        # 4. Afficher le contenu apr√®s correction
        print("\nüìÑ Contenu APR√àS correction:")
        print("-" * 40)
        with open(f'{test_dir}/problematic.tf', 'r') as f:
            print(f.read())
        
        # 5. V√©rifier que le code est maintenant conforme
        print("\n‚úÖ 5. V√©rification de la conformit√©...")
        result = subprocess.run(['python3', 'analyze_terraform.py', test_dir], 
                              capture_output=True, text=True)
        print("R√©sultat de la v√©rification:")
        print(result.stdout)
        
        # 6. Test avec format JSON
        print("\nüìä 6. Test avec format JSON...")
        result = subprocess.run(['python3', 'fix_terraform.py', test_dir, '--json'], 
                              capture_output=True, text=True)
        
        try:
            json_data = json.loads(result.stdout)
            print("üìã R√©sum√© JSON:")
            print(f"   ‚Ä¢ Fichiers trait√©s: {json_data['stats']['files_processed']}")
            print(f"   ‚Ä¢ Ressources corrig√©es: {json_data['stats']['resources_fixed']}")
            print(f"   ‚Ä¢ Corrections appliqu√©es: {json_data['stats']['fixes_applied']}")
        except:
            print("‚ùå Erreur lors du parsing JSON")
        
        # 7. Sauvegarder un rapport
        print("\nüíæ 7. Sauvegarde d'un rapport...")
        result = subprocess.run(['python3', 'fix_terraform.py', test_dir, '--output', 'rapport_correction.txt'], 
                              capture_output=True, text=True)
        
        if os.path.exists('rapport_correction.txt'):
            print("‚úÖ Rapport sauvegard√© dans 'rapport_correction.txt'")
            with open('rapport_correction.txt', 'r') as f:
                print("\nüìÑ Contenu du rapport:")
                print(f.read())
        
        print("\nüéâ D√©monstration termin√©e avec succ√®s!")
        print("\nüìö UTILISATION DU CORRECTEUR:")
        print("   ‚Ä¢ python3 fix_terraform.py <r√©pertoire>")
        print("   ‚Ä¢ python3 fix_terraform.py <r√©pertoire> --json")
        print("   ‚Ä¢ python3 fix_terraform.py <r√©pertoire> --output rapport.txt")
        print("   ‚Ä¢ python3 fix_terraform.py <r√©pertoire> --verbose")
        
        print("\nüîß TYPES DE CORRECTIONS APPLIQU√âES:")
        print("   ‚Ä¢ Suppression des attributs non support√©s")
        print("   ‚Ä¢ Ajout des attributs requis manquants")
        print("   ‚Ä¢ Correction des URLs OIDC manquantes")
        print("   ‚Ä¢ R√©solution des incoh√©rences logiques")
        print("   ‚Ä¢ G√©n√©ration de valeurs par d√©faut intelligentes")
        
    finally:
        # Nettoyage
        if os.path.exists(test_dir):
            shutil.rmtree(test_dir)
        if os.path.exists('rapport_correction.txt'):
            os.unlink('rapport_correction.txt')

if __name__ == "__main__":
    run_demo()
